<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [GREMSY_GIMBAL_JIG_TEST_FULL_v200\GREMSY_GIMBAL_JIG_TEST_ACSL_v201.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image GREMSY_GIMBAL_JIG_TEST_FULL_v200\GREMSY_GIMBAL_JIG_TEST_ACSL_v201.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Sep 21 09:02:44 2021
<BR><P>
<H3>Maximum Stack Usage =       2120 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; JIG_TEST_gimbal_FSTD_v2_main_process &rArr; JIG_TEST_gimbal_FSTD_v2_control_process &rArr; JIG_TEST_gimbal_FSTD_request_param_gimbal &rArr; JIG_TEST_gimbal_FSTD_setting_param_test &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">CAN2_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">OTG_FS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[5f]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[5f]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[60]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[61]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[5d]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[5e]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[30]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[63]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[64]">can_dji_cmd_gimbal_rc</a> from can_dji_gimbal.o(i.can_dji_cmd_gimbal_rc) referenced from can_dji_gimbal.o(.constdata)
 <LI><a href="#[65]">can_dji_cmd_remote_button</a> from can_dji_remote.o(i.can_dji_cmd_remote_button) referenced from can_dji_remote.o(.constdata)
 <LI><a href="#[62]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[59]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[1e7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[66]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ea]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1eb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ec]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_state_done
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_encode_chan
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_request_read_encode_chan
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_encode_chan
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_pack_chan
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[1ed]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_aux_test
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_Deinit
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[106]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_get_center_screen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_write_list
</UL>

<P><STRONG><a name="[1db]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
</UL>

<P><STRONG><a name="[111]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_get_string_result
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_setting_stiffness
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_check_mode_test_rc_result
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1f2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1f3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1f4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1f6]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[70]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox0CompleteCallback &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox0CompleteCallback &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA1_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_start_peripheral
</UL>

<P><STRONG><a name="[ff]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_send
</UL>

<P><STRONG><a name="[fe]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_sFilterConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[7c]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox0CompleteCallback &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_parse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_handle
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_start_peripheral
</UL>

<P><STRONG><a name="[7f]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, jig_test_can_dji_.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_enable
</UL>

<P><STRONG><a name="[7d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[9d]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[9f]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_setting_stiffness
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_press
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_serialPort3_Reinit
</UL>

<P><STRONG><a name="[de]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_aux_test
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_get_event
</UL>

<P><STRONG><a name="[143]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
</UL>

<P><STRONG><a name="[ef]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_aux_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_gpio_write
</UL>

<P><STRONG><a name="[8d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_press
</UL>

<P><STRONG><a name="[a0]"></a>HAL_I2C_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>

<P><STRONG><a name="[a1]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ad]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_configuration
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_configuration
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[d1]"></a>HAL_UART_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_enable
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[dc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 1376 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort5_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort4_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_init
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[e2]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_write_packet
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_send
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mavlinkprotocol.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_tx_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>JIG_TEST_aux_process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jig_test_aux.o(i.JIG_TEST_aux_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JIG_TEST_aux_process &rArr; JIG_TEST_aux_gpio_result_ok &rArr; get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_gpio_result_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
</UL>

<P><STRONG><a name="[14e]"></a>JIG_TEST_button_configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jig_test_button.o(i.JIG_TEST_button_configuration))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[f5]"></a>JIG_TEST_button_process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jig_test_button.o(i.JIG_TEST_button_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = JIG_TEST_button_process &rArr; JIG_TEST_button_select_2_mode &rArr; JIG_TEST_button_press &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_select_2_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[141]"></a>JIG_TEST_button_state_feed_back_imu</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, jig_test_button.o(i.JIG_TEST_button_state_feed_back_imu))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
</UL>

<P><STRONG><a name="[f7]"></a>JIG_TEST_can_dji_configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = JIG_TEST_can_dji_configuration &rArr; JIG_TEST_can_dji_sFilterConfig &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_start_peripheral
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_sFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[fc]"></a>JIG_TEST_can_dji_process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = JIG_TEST_can_dji_process &rArr; JIG_TEST_can_dji_test_protocol &rArr; JIG_TEST_can_dji_set_rc_channel &rArr; JIG_TEST_can_dji_write &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_test_protocol
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_first_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[124]"></a>JIG_TEST_can_dji_set_move</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_set_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JIG_TEST_can_dji_set_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[14f]"></a>JIG_TEST_comm_raspberry_v2_cloudData_configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jig_test_comm_raspberry_v2.o(i.JIG_TEST_comm_raspberry_v2_cloudData_configuration))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[14d]"></a>JIG_TEST_console_configuration</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, jig_test_console.o(i.JIG_TEST_console_configuration))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[f4]"></a>JIG_TEST_console_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, jig_test_console.o(i.JIG_TEST_console_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_configuration
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_setting_stiffness
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_mode_test_process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_return_home
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_motor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_imu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_check_mode_test_rc_result
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_test_protocol
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_Error_Handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_press
</UL>

<P><STRONG><a name="[10e]"></a>JIG_TEST_display_v2_configuration</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = JIG_TEST_display_v2_configuration &rArr; JIG_TEST_display_v2_after_reset &rArr; JGI_TEST_display_UpdateScreen &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[11d]"></a>JIG_TEST_display_v2_process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = JIG_TEST_display_v2_process &rArr; JIG_TEST_display_v2_main_control_process &rArr; JIG_TEST_display_v2_state_done &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_UpdateScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
</UL>

<P><STRONG><a name="[147]"></a>JIG_TEST_gimbal_FSTD_v2_configuration</STRONG> (Thumb, 222 bytes, Stack size 304 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_configuration &rArr; JIG_TEST_display_v2_configuration &rArr; JIG_TEST_display_v2_after_reset &rArr; JGI_TEST_display_UpdateScreen &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_configuration
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_comm_raspberry_v2_cloudData_configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_configuration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_configuration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_configuration
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_rtc_get_value_from_backup_register
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_configuration
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_configuration
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_serialPort3_Reinit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_configuration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>JIG_TEST_gimbal_FSTD_v2_get_error_heartbeat_com2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_get_error_heartbeat_com2))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[153]"></a>JIG_TEST_gimbal_FSTD_v2_main_process</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_main_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_main_process &rArr; JIG_TEST_gimbal_FSTD_v2_control_process &rArr; JIG_TEST_gimbal_FSTD_request_param_gimbal &rArr; JIG_TEST_gimbal_FSTD_setting_param_test &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculator_reset_time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculator_get_time_us
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_process
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_process
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>JIG_TEST_mavlink_gimbal_com4_set_move</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_com4_set_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = JIG_TEST_mavlink_gimbal_com4_set_move &rArr; JIG_TEST_mavlink_gimbal_move &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
</UL>

<P><STRONG><a name="[14c]"></a>JIG_TEST_mavlink_gimbal_configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = JIG_TEST_mavlink_gimbal_configuration &rArr; mavlinkProtocol_init &rArr; mavlinkProtocol_serialPort5_init &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[151]"></a>JIG_TEST_mavlink_gimbal_get_sensor_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_get_sensor_name))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[134]"></a>JIG_TEST_mavlink_gimbal_get_state_calib_imu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_get_state_calib_imu))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_imu
</UL>

<P><STRONG><a name="[136]"></a>JIG_TEST_mavlink_gimbal_get_state_calib_motor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_get_state_calib_motor))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_motor
</UL>

<P><STRONG><a name="[155]"></a>JIG_TEST_mavlink_gimbal_process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = JIG_TEST_mavlink_gimbal_process &rArr; JIG_TEST_mavlink_comm_raspberry_sendData &rArr; JIG_TEST_mavlink_comm_raspberry_send_param_value &rArr; JIG_TEST_mavlink_gimbal_param_value &rArr; mavlink_msg_param_value_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_sendData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_readData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_sendData
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
</UL>

<P><STRONG><a name="[139]"></a>JIG_TEST_mavlink_gimbal_send_param_request_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_send_param_request_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = JIG_TEST_mavlink_gimbal_send_param_request_read &rArr; JIG_TEST_mavlink_gimbal_param_request_read &rArr; mavlink_msg_param_request_read_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
</UL>

<P><STRONG><a name="[13d]"></a>JIG_TEST_mavlink_gimbal_set_control_motor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_set_control_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = JIG_TEST_mavlink_gimbal_set_control_motor &rArr; JIG_TEST_mavlink_gimbal_control_motor &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_mode_test_process
</UL>

<P><STRONG><a name="[13b]"></a>JIG_TEST_mavlink_gimbal_set_home</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_set_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = JIG_TEST_mavlink_gimbal_set_home &rArr; JIG_TEST_mavlink_gimbal_home &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_return_home
</UL>

<P><STRONG><a name="[130]"></a>JIG_TEST_mavlink_gimbal_set_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = JIG_TEST_mavlink_gimbal_set_mode &rArr; JIG_TEST_mavlink_gimbal_mode &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
</UL>

<P><STRONG><a name="[131]"></a>JIG_TEST_mavlink_gimbal_set_move</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_set_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = JIG_TEST_mavlink_gimbal_set_move &rArr; JIG_TEST_mavlink_gimbal_move &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
</UL>

<P><STRONG><a name="[137]"></a>JIG_TEST_mavlink_gimbal_set_param</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_setting_stiffness
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
</UL>

<P><STRONG><a name="[12d]"></a>JIG_TEST_mavlink_gimbal_set_rc_input</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_set_rc_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = JIG_TEST_mavlink_gimbal_set_rc_input &rArr; JIG_TEST_mavlink_gimbal_remoteControl &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_apply_mode_test
</UL>

<P><STRONG><a name="[146]"></a>JIG_TEST_mavlink_serialPort3_Reinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_serialPort3_Reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = JIG_TEST_mavlink_serialPort3_Reinit &rArr; mavlinkProtocol_serialPort3_init &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
</UL>

<P><STRONG><a name="[14a]"></a>JIG_TEST_ppm_gimbal_configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = JIG_TEST_ppm_gimbal_configuration &rArr; ppm_configuration &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[122]"></a>JIG_TEST_ppm_gimbal_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JIG_TEST_ppm_gimbal_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_enable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[123]"></a>JIG_TEST_ppm_gimbal_process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = JIG_TEST_ppm_gimbal_process &rArr; JIG_TEST_ppm_gimbal_Control &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[148]"></a>JIG_TEST_rtc_get_value_from_backup_register</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jig_test_rtc.o(i.JIG_TEST_rtc_get_value_from_backup_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JIG_TEST_rtc_get_value_from_backup_register
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_BAK_GetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[14b]"></a>JIG_TEST_sbus_gimbal_configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JIG_TEST_sbus_gimbal_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_set_default_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>

<P><STRONG><a name="[121]"></a>JIG_TEST_sbus_gimbal_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = JIG_TEST_sbus_gimbal_enable &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[120]"></a>JIG_TEST_sbus_gimbal_process</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = JIG_TEST_sbus_gimbal_process &rArr; JIG_TEST_sbus_gimbal_Control &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_write_packet
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_set_channel_value
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[18d]"></a>LL_RTC_DATE_Init</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_DATE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsShadowRegBypassEnabled
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[18f]"></a>LL_RTC_EnterInitMode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[197]"></a>LL_RTC_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_Init &rArr; LL_RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[198]"></a>LL_RTC_TIME_Init</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_TIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Config
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsShadowRegBypassEnabled
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_GetHourFormat
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[193]"></a>LL_RTC_WaitForSynchro</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>SystemClock_Config</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d0]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[bb]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ca]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fc]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1bc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gimbal_handle
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_gimbal_rc
</UL>

<P><STRONG><a name="[1fd]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1fe]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ff]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[10c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_time_test
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_mode_test
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_name
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_setting_stiffness
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_check_mode_test_rc_result
</UL>

<P><STRONG><a name="[200]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[201]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[158]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
</UL>

<P><STRONG><a name="[202]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[203]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[204]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1b2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[1cc]"></a>_mav_trim_payload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mavlinkprotocol.o(i._mav_trim_payload))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[168]"></a>_mavlink_send_uart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mavlinkprotocol.o(i._mavlink_send_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _mavlink_send_uart &rArr; comm_send_buffer &rArr; serialPort_write_list &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
</UL>

<P><STRONG><a name="[156]"></a>calculator_get_time_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeout.o(i.calculator_get_time_us))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
</UL>

<P><STRONG><a name="[154]"></a>calculator_reset_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timeout.o(i.calculator_reset_time))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
</UL>

<P><STRONG><a name="[100]"></a>can_dji_cmd_gimbal_control_msg_pack</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, can_dji_gimbal.o(i.can_dji_cmd_gimbal_control_msg_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_dji_cmd_gimbal_control_msg_pack &rArr; gs_can_msg_pack &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_msg_pack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_coppy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_rc_channel
</UL>

<P><STRONG><a name="[103]"></a>can_dji_cmd_remote_control_gimbal_msg_pack</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, can_dji_remote.o(i.can_dji_cmd_remote_control_gimbal_msg_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_dji_cmd_remote_control_gimbal_msg_pack &rArr; gs_can_msg_pack &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_msg_pack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_coppy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_remote_button
</UL>

<P><STRONG><a name="[95]"></a>can_dji_handle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, can_dji.o(i.can_dji_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_dji_handle &rArr; can_gimbal_handle &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_handle_remote_button
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gimbal_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[1bd]"></a>can_gimbal_handle</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, can_dji_gimbal.o(i.can_gimbal_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_gimbal_handle &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_handle
</UL>

<P><STRONG><a name="[1be]"></a>can_handle_remote_button</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, can_dji_remote.o(i.can_handle_remote_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_handle_remote_button
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_handle
</UL>

<P><STRONG><a name="[1b5]"></a>comm_send_buffer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mavlinkprotocol.o(i.comm_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = comm_send_buffer &rArr; serialPort_write_list &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_write_list
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
</UL>

<P><STRONG><a name="[62]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[169]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
</UL>

<P><STRONG><a name="[ed]"></a>get_timeOut</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timeout.o(i.get_timeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeOut_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_aux_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_write_packet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control_CW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control_CCW
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_Error_Handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control_CW
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control_CCW
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_sendData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_sendData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_gpio_result_ok
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_select_2_mode
</UL>

<P><STRONG><a name="[1b9]"></a>gs_can_coppy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can_dji_protocol.o(i.gs_can_coppy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gs_can_coppy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_remote_control_gimbal_msg_pack
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_gimbal_control_msg_pack
</UL>

<P><STRONG><a name="[1bb]"></a>gs_can_crc8</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, can_dji_protocol.o(i.gs_can_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gs_can_crc8 &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc_8_update
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_remote_button
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_gimbal_rc
</UL>

<P><STRONG><a name="[1ba]"></a>gs_can_msg_pack</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, can_dji_protocol.o(i.gs_can_msg_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gs_can_msg_pack &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc_8_update
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc_16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_remote_control_gimbal_msg_pack
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_gimbal_control_msg_pack
</UL>

<P><STRONG><a name="[94]"></a>gs_can_parse</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, can_dji_protocol.o(i.gs_can_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gs_can_parse &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc_8_update
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc_16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[59]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = main &rArr; JIG_TEST_gimbal_FSTD_v2_main_process &rArr; JIG_TEST_gimbal_FSTD_v2_control_process &rArr; JIG_TEST_gimbal_FSTD_request_param_gimbal &rArr; JIG_TEST_gimbal_FSTD_setting_param_test &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[166]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
</UL>

<P><STRONG><a name="[162]"></a>mavlinkProtocol_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mavlinkprotocol.o(i.mavlinkProtocol_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mavlinkProtocol_init &rArr; mavlinkProtocol_serialPort5_init &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort5_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort4_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_configuration
</UL>

<P><STRONG><a name="[17b]"></a>mavlinkProtocol_serialPort3_Deinit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort3_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mavlinkProtocol_serialPort3_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_serialPort3_Reinit
</UL>

<P><STRONG><a name="[17c]"></a>mavlinkProtocol_serialPort3_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mavlinkProtocol_serialPort3_init &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_serialPort3_Reinit
</UL>

<P><STRONG><a name="[173]"></a>mavlinkProtocol_serialPort3_readData</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort3_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mavlinkProtocol_serialPort3_readData &rArr; mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_read
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_readData
</UL>

<P><STRONG><a name="[1c6]"></a>mavlinkProtocol_serialPort4_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mavlinkProtocol_serialPort4_init &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_init
</UL>

<P><STRONG><a name="[174]"></a>mavlinkProtocol_serialPort4_readData</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort4_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mavlinkProtocol_serialPort4_readData &rArr; mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_read
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_readData
</UL>

<P><STRONG><a name="[1c7]"></a>mavlinkProtocol_serialPort5_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mavlinkProtocol_serialPort5_init &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_init
</UL>

<P><STRONG><a name="[175]"></a>mavlinkProtocol_serialPort5_readData</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mavlinkprotocol.o(i.mavlinkProtocol_serialPort5_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mavlinkProtocol_serialPort5_readData &rArr; mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_read
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_readData
</UL>

<P><STRONG><a name="[17a]"></a>mavlink_finalize_message</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, mavlinkprotocol.o(i.mavlink_finalize_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
</UL>

<P><STRONG><a name="[1cb]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, mavlinkprotocol.o(i.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[1ca]"></a>mavlink_finalize_message_chan</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, mavlinkprotocol.o(i.mavlink_finalize_message_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_encode_chan
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_request_read_encode_chan
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_encode_chan
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_pack_chan
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message
</UL>

<P><STRONG><a name="[1ce]"></a>mavlink_frame_char</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, mavlinkprotocol.o(i.mavlink_frame_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_buffer
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>

<P><STRONG><a name="[1d0]"></a>mavlink_frame_char_buffer</STRONG> (Thumb, 852 bytes, Stack size 40 bytes, mavlinkprotocol.o(i.mavlink_frame_char_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_update_checksum
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_start_checksum
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_msg_entry
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_parse_error
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
</UL>

<P><STRONG><a name="[1cf]"></a>mavlink_get_channel_buffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mavlinkprotocol.o(i.mavlink_get_channel_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
</UL>

<P><STRONG><a name="[164]"></a>mavlink_get_channel_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mavlinkprotocol.o(i.mavlink_get_channel_status))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[1d4]"></a>mavlink_get_msg_entry</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, mavlinkprotocol.o(i.mavlink_get_msg_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mavlink_get_msg_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[167]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, mavlinkprotocol.o(i.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mavlink_msg_to_send_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
</UL>

<P><STRONG><a name="[1c9]"></a>mavlink_parse_char</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mavlinkprotocol.o(i.mavlink_parse_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_start_checksum
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_buffer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_parse_error
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort5_readData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort4_readData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_readData
</UL>

<P><STRONG><a name="[1d7]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, mavlinkprotocol.o(i.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[1da]"></a>mavlink_sha256_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mavlinkprotocol.o(i.mavlink_sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[1d8]"></a>mavlink_sha256_update</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, mavlinkprotocol.o(i.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[1cd]"></a>mavlink_sign_packet</STRONG> (Thumb, 150 bytes, Stack size 144 bytes, mavlinkprotocol.o(i.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[1d5]"></a>mavlink_signature_check</STRONG> (Thumb, 382 bytes, Stack size 168 bytes, mavlinkprotocol.o(i.mavlink_signature_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[1d1]"></a>mavlink_start_checksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mavlinkprotocol.o(i.mavlink_start_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[1d3]"></a>mavlink_update_checksum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mavlinkprotocol.o(i.mavlink_update_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mavlink_update_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[182]"></a>ppm_configuration</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ppm.o(i.ppm_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ppm_configuration &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_configuration
</UL>

<P><STRONG><a name="[184]"></a>ppm_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ppm.o(i.ppm_disable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_enable
</UL>

<P><STRONG><a name="[183]"></a>ppm_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ppm.o(i.ppm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_enable
</UL>

<P><STRONG><a name="[181]"></a>ppm_set_channel</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ppm.o(i.ppm_set_channel))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_setttingFirstControl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control_CW
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control_CCW
</UL>

<P><STRONG><a name="[1c8]"></a>serialPort_read</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, serialport.o(i.serialPort_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serialPort_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_read_byte_count
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort5_readData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort4_readData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_readData
</UL>

<P><STRONG><a name="[1dc]"></a>serialPort_read_byte_count</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serialport.o(i.serialPort_read_byte_count))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_read
</UL>

<P><STRONG><a name="[1dd]"></a>serialPort_send</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, serialport.o(i.serialPort_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_tx_finish
</UL>

<P><STRONG><a name="[e4]"></a>serialPort_tx_finish</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, serialport.o(i.serialPort_tx_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_send
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[107]"></a>serialPort_write</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, serialport.o(i.serialPort_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_write_list
</UL>

<P><STRONG><a name="[1bf]"></a>serialPort_write_list</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, serialport.o(i.serialPort_write_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = serialPort_write_list &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialPort_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_send_buffer
</UL>

<P><STRONG><a name="[1e5]"></a>ssd1306_DrawPixel</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, ssd1306.o(i.ssd1306_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssd1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
</UL>

<P><STRONG><a name="[1e2]"></a>ssd1306_Fill</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_Fill))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[10f]"></a>ssd1306_Init</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ssd1306_Init &rArr; ssd1306_SetDisplayOn &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Reset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_configuration
</UL>

<P><STRONG><a name="[1de]"></a>ssd1306_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[1e1]"></a>ssd1306_SetContrast</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_SetContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ssd1306_SetContrast &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[ea]"></a>ssd1306_SetCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_name
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>

<P><STRONG><a name="[1df]"></a>ssd1306_SetDisplayOn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_SetDisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ssd1306_SetDisplayOn &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[e8]"></a>ssd1306_UpdateScreen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_UpdateScreen
</UL>

<P><STRONG><a name="[1e4]"></a>ssd1306_WriteChar</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ssd1306.o(i.ssd1306_WriteChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
</UL>

<P><STRONG><a name="[1e0]"></a>ssd1306_WriteCommand</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
</UL>

<P><STRONG><a name="[1e3]"></a>ssd1306_WriteData</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
</UL>

<P><STRONG><a name="[eb]"></a>ssd1306_WriteString</STRONG> (Thumb, 44 bytes, Stack size 28 bytes, ssd1306.o(i.ssd1306_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_name
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>

<P><STRONG><a name="[149]"></a>timeOut_configuration</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timeout.o(i.timeOut_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeOut_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_configuration
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19c]"></a>MX_CAN1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>MX_DMA_Init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>MX_GPIO_Init</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>MX_I2C1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>MX_RTC_Init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_RTC_Init &rArr; LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>MX_TIM4_Init</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>MX_TIM5_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>MX_UART4_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>MX_UART5_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[9c]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[9e]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ae]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[af]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[e6]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[a6]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[a8]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[a4]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>

<P><STRONG><a name="[e5]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[a7]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[190]"></a>LL_RTC_DATE_Config</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_DATE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_RTC_DATE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[191]"></a>LL_RTC_DisableInitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_DisableInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[18e]"></a>LL_RTC_DisableWriteProtection</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_DisableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[194]"></a>LL_RTC_EnableWriteProtection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_EnableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[199]"></a>LL_RTC_GetHourFormat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_GetHourFormat))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[195]"></a>LL_RTC_IsActiveFlag_INIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_IsActiveFlag_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[19b]"></a>LL_RTC_IsActiveFlag_RS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_IsActiveFlag_RS))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[192]"></a>LL_RTC_IsShadowRegBypassEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_IsShadowRegBypassEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[19a]"></a>LL_RTC_TIME_Config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_ll_rtc.o(i.LL_RTC_TIME_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_RTC_TIME_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[196]"></a>LL_SYSTICK_IsActiveCounterFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_rtc.o(i.LL_SYSTICK_IsActiveCounterFlag))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[bd]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c9]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[cb]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[cc]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[bc]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[be]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[5c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[5f]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[60]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[61]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[5d]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[5e]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[d5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[da]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; serialPort_tx_finish &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[d4]"></a>UART_Receive_IT</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d9]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>timeOut_get_ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timeout.o(i.timeOut_get_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
</UL>

<P><STRONG><a name="[17d]"></a>JIG_TEST_ppm_gimbal_Control</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = JIG_TEST_ppm_gimbal_Control &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_setttingFirstControl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control_CW
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control_CCW
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_process
</UL>

<P><STRONG><a name="[180]"></a>JIG_TEST_ppm_gimbal_Control_CCW</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_Control_CCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JIG_TEST_ppm_gimbal_Control_CCW &rArr; get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_set_channel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control
</UL>

<P><STRONG><a name="[17f]"></a>JIG_TEST_ppm_gimbal_Control_CW</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_Control_CW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JIG_TEST_ppm_gimbal_Control_CW &rArr; get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_set_channel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control
</UL>

<P><STRONG><a name="[17e]"></a>JIG_TEST_ppm_gimbal_setttingFirstControl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jig_test_ppm_gimbal.o(i.JIG_TEST_ppm_gimbal_setttingFirstControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JIG_TEST_ppm_gimbal_setttingFirstControl
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppm_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_Control
</UL>

<P><STRONG><a name="[93]"></a>JIG_TEST_can_dji_Error_Handler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_start_peripheral
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_sFilterConfig
</UL>

<P><STRONG><a name="[fa]"></a>JIG_TEST_can_dji_first_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_first_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = JIG_TEST_can_dji_first_send &rArr; JIG_TEST_can_dji_set_rc_channel &rArr; JIG_TEST_can_dji_write &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_rc_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_process
</UL>

<P><STRONG><a name="[f8]"></a>JIG_TEST_can_dji_sFilterConfig</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_sFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = JIG_TEST_can_dji_sFilterConfig &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_configuration
</UL>

<P><STRONG><a name="[97]"></a>JIG_TEST_can_dji_send</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_write
</UL>

<P><STRONG><a name="[105]"></a>JIG_TEST_can_dji_set_default_param</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_set_default_param))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_start_peripheral
</UL>

<P><STRONG><a name="[fb]"></a>JIG_TEST_can_dji_set_rc_channel</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_set_rc_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = JIG_TEST_can_dji_set_rc_channel &rArr; JIG_TEST_can_dji_write &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_gimbal_control_msg_pack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_test_protocol
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_first_send
</UL>

<P><STRONG><a name="[102]"></a>JIG_TEST_can_dji_set_remote_button</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_set_remote_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = JIG_TEST_can_dji_set_remote_button &rArr; JIG_TEST_can_dji_write &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_dji_cmd_remote_control_gimbal_msg_pack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_test_protocol
</UL>

<P><STRONG><a name="[f9]"></a>JIG_TEST_can_dji_start_peripheral</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_start_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = JIG_TEST_can_dji_start_peripheral &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_default_param
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_configuration
</UL>

<P><STRONG><a name="[fd]"></a>JIG_TEST_can_dji_test_protocol</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_test_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = JIG_TEST_can_dji_test_protocol &rArr; JIG_TEST_can_dji_set_rc_channel &rArr; JIG_TEST_can_dji_write &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_remote_button
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_rc_channel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_process
</UL>

<P><STRONG><a name="[101]"></a>JIG_TEST_can_dji_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, jig_test_can_dji_.o(i.JIG_TEST_can_dji_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = JIG_TEST_can_dji_write &rArr; JIG_TEST_can_dji_send &rArr; JIG_TEST_can_dji_Error_Handler &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_send
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_remote_button
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_rc_channel
</UL>

<P><STRONG><a name="[186]"></a>JIG_TEST_sbus_gimbal_Control</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = JIG_TEST_sbus_gimbal_Control &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_setttingFirstControl
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control_CW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control_CCW
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_process
</UL>

<P><STRONG><a name="[188]"></a>JIG_TEST_sbus_gimbal_Control_CCW</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_Control_CCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JIG_TEST_sbus_gimbal_Control_CCW &rArr; get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_set_channel_value
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control
</UL>

<P><STRONG><a name="[189]"></a>JIG_TEST_sbus_gimbal_Control_CW</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_Control_CW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JIG_TEST_sbus_gimbal_Control_CW &rArr; get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_set_channel_value
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control
</UL>

<P><STRONG><a name="[18a]"></a>JIG_TEST_sbus_gimbal_set_channel_value</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_set_channel_value))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_setttingFirstControl
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control_CW
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control_CCW
</UL>

<P><STRONG><a name="[18b]"></a>JIG_TEST_sbus_gimbal_set_default_channel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_set_default_channel))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_configuration
</UL>

<P><STRONG><a name="[187]"></a>JIG_TEST_sbus_gimbal_setttingFirstControl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_gimbal_setttingFirstControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JIG_TEST_sbus_gimbal_setttingFirstControl
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_set_channel_value
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_Control
</UL>

<P><STRONG><a name="[18c]"></a>JIG_TEST_sbus_write_packet</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, jig_test_sbus_gimbal.o(i.JIG_TEST_sbus_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = JIG_TEST_sbus_write_packet &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_process
</UL>

<P><STRONG><a name="[1d2]"></a>_mav_parse_error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mavlinkprotocol.o(i._mav_parse_error))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[1c1]"></a>crc_accumulate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mavlinkprotocol.o(i.crc_accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_update_checksum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
</UL>

<P><STRONG><a name="[1c0]"></a>crc_accumulate_buffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mavlinkprotocol.o(i.crc_accumulate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc_accumulate_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[1c2]"></a>crc_calculate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mavlinkprotocol.o(i.crc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[1d9]"></a>mavlink_sha256_calc</STRONG> (Thumb, 474 bytes, Stack size 304 bytes, mavlinkprotocol.o(i.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[15c]"></a>JIG_TEST_mavlink_comm_raspberry_sendData</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_comm_raspberry_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = JIG_TEST_mavlink_comm_raspberry_sendData &rArr; JIG_TEST_mavlink_comm_raspberry_send_param_value &rArr; JIG_TEST_mavlink_gimbal_param_value &rArr; mavlink_msg_param_value_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_send_request_param_read_msg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_send_param_value
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_process
</UL>

<P><STRONG><a name="[15e]"></a>JIG_TEST_mavlink_comm_raspberry_send_param_value</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_comm_raspberry_send_param_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = JIG_TEST_mavlink_comm_raspberry_send_param_value &rArr; JIG_TEST_mavlink_gimbal_param_value &rArr; mavlink_msg_param_value_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_sendData
</UL>

<P><STRONG><a name="[15d]"></a>JIG_TEST_mavlink_comm_raspberry_send_request_param_read_msg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_comm_raspberry_send_request_param_read_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = JIG_TEST_mavlink_comm_raspberry_send_request_param_read_msg &rArr; JIG_TEST_mavlink_gimbal_param_request_read &rArr; mavlink_msg_param_request_read_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_sendData
</UL>

<P><STRONG><a name="[163]"></a>JIG_TEST_mavlink_gimbal_control_motor</STRONG> (Thumb, 124 bytes, Stack size 368 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_control_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = JIG_TEST_mavlink_gimbal_control_motor &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_encode_chan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_control_motor
</UL>

<P><STRONG><a name="[16a]"></a>JIG_TEST_mavlink_gimbal_home</STRONG> (Thumb, 132 bytes, Stack size 368 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = JIG_TEST_mavlink_gimbal_home &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_encode_chan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_home
</UL>

<P><STRONG><a name="[16b]"></a>JIG_TEST_mavlink_gimbal_message_reciver_handle</STRONG> (Thumb, 1432 bytes, Stack size 80 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_message_reciver_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = JIG_TEST_mavlink_gimbal_message_reciver_handle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_readData
</UL>

<P><STRONG><a name="[16e]"></a>JIG_TEST_mavlink_gimbal_mode</STRONG> (Thumb, 124 bytes, Stack size 368 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = JIG_TEST_mavlink_gimbal_mode &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_encode_chan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_mode
</UL>

<P><STRONG><a name="[161]"></a>JIG_TEST_mavlink_gimbal_move</STRONG> (Thumb, 194 bytes, Stack size 384 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = JIG_TEST_mavlink_gimbal_move &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_encode_chan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_move
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_com4_set_move
</UL>

<P><STRONG><a name="[160]"></a>JIG_TEST_mavlink_gimbal_param_request_read</STRONG> (Thumb, 120 bytes, Stack size 360 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_param_request_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = JIG_TEST_mavlink_gimbal_param_request_read &rArr; mavlink_msg_param_request_read_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_request_read_encode_chan
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_send_request_param_read_msg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param_request_read
</UL>

<P><STRONG><a name="[15f]"></a>JIG_TEST_mavlink_gimbal_param_value</STRONG> (Thumb, 136 bytes, Stack size 368 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_param_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = JIG_TEST_mavlink_gimbal_param_value &rArr; mavlink_msg_param_value_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_encode_chan
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_comm_raspberry_send_param_value
</UL>

<P><STRONG><a name="[172]"></a>JIG_TEST_mavlink_gimbal_readData</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = JIG_TEST_mavlink_gimbal_readData &rArr; mavlinkProtocol_serialPort5_readData &rArr; mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort5_readData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort4_readData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlinkProtocol_serialPort3_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_process
</UL>

<P><STRONG><a name="[176]"></a>JIG_TEST_mavlink_gimbal_remoteControl</STRONG> (Thumb, 122 bytes, Stack size 368 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_remoteControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = JIG_TEST_mavlink_gimbal_remoteControl &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_encode_chan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_rc_input
</UL>

<P><STRONG><a name="[171]"></a>JIG_TEST_mavlink_gimbal_sendData</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = JIG_TEST_mavlink_gimbal_sendData &rArr; JIG_TEST_mavlink_gimbal_send_heartbeat &rArr; mavlink_msg_heartbeat_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_process
</UL>

<P><STRONG><a name="[177]"></a>JIG_TEST_mavlink_gimbal_send_heartbeat</STRONG> (Thumb, 186 bytes, Stack size 344 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_send_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = JIG_TEST_mavlink_gimbal_send_heartbeat &rArr; mavlink_msg_heartbeat_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_encode_chan
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_sendData
</UL>

<P><STRONG><a name="[179]"></a>JIG_TEST_mavlink_gimbal_send_param</STRONG> (Thumb, 164 bytes, Stack size 680 bytes, jig_test_mavlink_gimbal.o(i.JIG_TEST_mavlink_gimbal_send_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mavlink_send_uart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
</UL>

<P><STRONG><a name="[16d]"></a>mav_array_memcpy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, jig_test_mavlink_gimbal.o(i.mav_array_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mav_array_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_encode_chan
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_request_read_encode_chan
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_message_reciver_handle
</UL>

<P><STRONG><a name="[165]"></a>mavlink_msg_command_long_encode_chan</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, jig_test_mavlink_gimbal.o(i.mavlink_msg_command_long_encode_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_pack_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_remoteControl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_move
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_control_motor
</UL>

<P><STRONG><a name="[1d6]"></a>mavlink_msg_command_long_pack_chan</STRONG> (Thumb, 150 bytes, Stack size 120 bytes, jig_test_mavlink_gimbal.o(i.mavlink_msg_command_long_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_long_encode_chan
</UL>

<P><STRONG><a name="[178]"></a>mavlink_msg_heartbeat_encode_chan</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, jig_test_mavlink_gimbal.o(i.mavlink_msg_heartbeat_encode_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mavlink_msg_heartbeat_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_heartbeat
</UL>

<P><STRONG><a name="[16f]"></a>mavlink_msg_param_request_read_encode_chan</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, jig_test_mavlink_gimbal.o(i.mavlink_msg_param_request_read_encode_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mavlink_msg_param_request_read_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_request_read
</UL>

<P><STRONG><a name="[170]"></a>mavlink_msg_param_value_encode_chan</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, jig_test_mavlink_gimbal.o(i.mavlink_msg_param_value_encode_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = mavlink_msg_param_value_encode_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_param_value
</UL>

<P><STRONG><a name="[f1]"></a>JIG_TEST_button_get_event</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jig_test_button.o(i.JIG_TEST_button_get_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JIG_TEST_button_get_event
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_press
</UL>

<P><STRONG><a name="[f3]"></a>JIG_TEST_button_press</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, jig_test_button.o(i.JIG_TEST_button_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = JIG_TEST_button_press &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_get_event
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_select_2_mode
</UL>

<P><STRONG><a name="[f6]"></a>JIG_TEST_button_select_2_mode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, jig_test_button.o(i.JIG_TEST_button_select_2_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = JIG_TEST_button_select_2_mode &rArr; JIG_TEST_button_press &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_press
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_process
</UL>

<P><STRONG><a name="[ec]"></a>JIG_TEST_aux_gpio_result_ok</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, jig_test_aux.o(i.JIG_TEST_aux_gpio_result_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JIG_TEST_aux_gpio_result_ok &rArr; get_timeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_process
</UL>

<P><STRONG><a name="[ee]"></a>JIG_TEST_aux_gpio_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jig_test_aux.o(i.JIG_TEST_aux_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JIG_TEST_aux_gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_aux_gpio_result_ok
</UL>

<P><STRONG><a name="[185]"></a>LL_RTC_BAK_GetRegister</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jig_test_rtc.o(i.LL_RTC_BAK_GetRegister))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_rtc_get_value_from_backup_register
</UL>

<P><STRONG><a name="[11f]"></a>JIG_TEST_gimbal_FSTD_all_mode_control_process</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_all_mode_control_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = JIG_TEST_gimbal_FSTD_all_mode_control_process &rArr; JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3 &rArr; JIG_TEST_gimbal_FSTD_setting_param_select &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_set_stiffness_gimbal_20
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_aux_test
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_sbus_gimbal_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_set_move
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_can_dji_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_ppm_gimbal_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[12b]"></a>JIG_TEST_gimbal_FSTD_apply_mode_test</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_apply_mode_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = JIG_TEST_gimbal_FSTD_apply_mode_test &rArr; JIG_TEST_gimbal_FSTD_get_mode_control &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_rc_input
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_mode_test_process
</UL>

<P><STRONG><a name="[12e]"></a>JIG_TEST_gimbal_FSTD_check_mode_test_rc_result</STRONG> (Thumb, 388 bytes, Stack size 128 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_check_mode_test_rc_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = JIG_TEST_gimbal_FSTD_check_mode_test_rc_result &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_mode_test_process
</UL>

<P><STRONG><a name="[125]"></a>JIG_TEST_gimbal_FSTD_control_angle</STRONG> (Thumb, 822 bytes, Stack size 256 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_control_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = JIG_TEST_gimbal_FSTD_control_angle &rArr; JIG_TEST_mavlink_gimbal_set_move &rArr; JIG_TEST_mavlink_gimbal_move &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_move
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_mode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_com4_set_move
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[133]"></a>JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_imu</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_imu &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_get_state_calib_imu
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[135]"></a>JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_motor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_motor &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_get_state_calib_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[12c]"></a>JIG_TEST_gimbal_FSTD_get_mode_control</STRONG> (Thumb, 520 bytes, Stack size 152 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_get_mode_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = JIG_TEST_gimbal_FSTD_get_mode_control &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param_request_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_apply_mode_test
</UL>

<P><STRONG><a name="[13a]"></a>JIG_TEST_gimbal_FSTD_get_return_home</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_get_return_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = JIG_TEST_gimbal_FSTD_get_return_home &rArr; JIG_TEST_mavlink_gimbal_set_home &rArr; JIG_TEST_mavlink_gimbal_home &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_home
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_mode_test_process
</UL>

<P><STRONG><a name="[13c]"></a>JIG_TEST_gimbal_FSTD_mode_test_process</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_mode_test_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = JIG_TEST_gimbal_FSTD_mode_test_process &rArr; JIG_TEST_gimbal_FSTD_apply_mode_test &rArr; JIG_TEST_gimbal_FSTD_get_mode_control &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_return_home
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_check_mode_test_rc_result
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_apply_mode_test
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_control_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[13e]"></a>JIG_TEST_gimbal_FSTD_request_param_gimbal</STRONG> (Thumb, 664 bytes, Stack size 360 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_request_param_gimbal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = JIG_TEST_gimbal_FSTD_request_param_gimbal &rArr; JIG_TEST_gimbal_FSTD_setting_param_test &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_test
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param_request_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[140]"></a>JIG_TEST_gimbal_FSTD_run_feed_back_imu</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_run_feed_back_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = JIG_TEST_gimbal_FSTD_run_feed_back_imu &rArr; JIG_TEST_gimbal_FSTD_v2_setting_stiffness &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_setting_stiffness
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_control_angle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_state_feed_back_imu
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_home
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_control_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[144]"></a>JIG_TEST_gimbal_FSTD_setting_param_select</STRONG> (Thumb, 244 bytes, Stack size 136 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_setting_param_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = JIG_TEST_gimbal_FSTD_setting_param_select &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_send_param_request_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_set_stiffness_gimbal_20
</UL>

<P><STRONG><a name="[13f]"></a>JIG_TEST_gimbal_FSTD_setting_param_test</STRONG> (Thumb, 344 bytes, Stack size 128 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_setting_param_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = JIG_TEST_gimbal_FSTD_setting_param_test &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
</UL>

<P><STRONG><a name="[145]"></a>JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2 &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_serialPort3_Reinit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[126]"></a>JIG_TEST_gimbal_FSTD_v2_aux_test</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_aux_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_aux_test &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[150]"></a>JIG_TEST_gimbal_FSTD_v2_control_process</STRONG> (Thumb, 1896 bytes, Stack size 128 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_control_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_control_process &rArr; JIG_TEST_gimbal_FSTD_request_param_gimbal &rArr; JIG_TEST_gimbal_FSTD_setting_param_test &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_timeOut_connection_gimbal_COM2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_mode_test_process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_motor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_gimbal_startup_calib_imu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeOut
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_button_process
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_control_motor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_get_sensor_name
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_main_process
</UL>

<P><STRONG><a name="[157]"></a>JIG_TEST_gimbal_FSTD_v2_sensor_axis</STRONG> (Thumb, 602 bytes, Stack size 264 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_sensor_axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_sensor_axis &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_get_sensor_name
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate
</UL>

<P><STRONG><a name="[127]"></a>JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_set_gimbal_mapping_mode &rArr; JIG_TEST_mavlink_gimbal_set_move &rArr; JIG_TEST_mavlink_gimbal_move &rArr; mavlink_msg_command_long_encode_chan &rArr; mavlink_msg_command_long_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_move
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[128]"></a>JIG_TEST_gimbal_FSTD_v2_set_stiffness_gimbal_20</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_set_stiffness_gimbal_20))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_set_stiffness_gimbal_20 &rArr; JIG_TEST_gimbal_FSTD_setting_param_select &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[142]"></a>JIG_TEST_gimbal_FSTD_v2_setting_stiffness</STRONG> (Thumb, 874 bytes, Stack size 160 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_setting_stiffness))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_setting_stiffness &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_set_param
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_run_feed_back_imu
</UL>

<P><STRONG><a name="[129]"></a>JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3 &rArr; JIG_TEST_gimbal_FSTD_setting_param_select &rArr; JIG_TEST_mavlink_gimbal_set_param &rArr; JIG_TEST_mavlink_gimbal_send_param &rArr; mavlink_finalize_message &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_setting_param_select
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[12a]"></a>JIG_TEST_gimbal_FSTD_v2_vibrate</STRONG> (Thumb, 552 bytes, Stack size 136 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_vibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_vibrate &rArr; JIG_TEST_gimbal_FSTD_v2_sensor_axis &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_mavlink_gimbal_get_sensor_name
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_all_mode_control_process
</UL>

<P><STRONG><a name="[159]"></a>JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis</STRONG> (Thumb, 348 bytes, Stack size 152 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = JIG_TEST_gimbal_FSTD_v2_vibrate_once_axis &rArr; JIG_TEST_gimbal_FSTD_v2_sensor_axis &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_sensor_axis
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_test_vibrate_s1v3
</UL>

<P><STRONG><a name="[152]"></a>JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test</STRONG> (Thumb, 44 bytes, Stack size 216 bytes, jig_test_gimbal_fstd_v2.o(i.JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = JIG_TEST_gimbal_FSTD_write_to_console_result_mode_test &rArr; JIG_TEST_console_write &rArr; serialPort_write &rArr; serialPort_send &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_console_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_control_process
</UL>

<P><STRONG><a name="[138]"></a>__NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, jig_test_gimbal_fstd_v2.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_request_param_gimbal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_get_mode_control
</UL>

<P><STRONG><a name="[e7]"></a>JGI_TEST_display_UpdateScreen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, jig_test_display_v2.o(i.JGI_TEST_display_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = JGI_TEST_display_UpdateScreen &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_process
</UL>

<P><STRONG><a name="[e9]"></a>JGI_TEST_display_v2_clear</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, jig_test_display_v2.o(i.JGI_TEST_display_v2_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = JGI_TEST_display_v2_clear &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_waitting_scan_barCode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_waitting_for_login
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_state_done
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_setting_param_gimbal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_mode_test
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_startup_calib_motor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_startup_calib_imu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
</UL>

<P><STRONG><a name="[108]"></a>JIG_TEST_display_get_center_screen</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, jig_test_display_v2.o(i.JIG_TEST_display_get_center_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JIG_TEST_display_get_center_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
</UL>

<P><STRONG><a name="[10b]"></a>JIG_TEST_display_get_device_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, jig_test_display_v2.o(i.JIG_TEST_display_get_device_name))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
</UL>

<P><STRONG><a name="[109]"></a>JIG_TEST_display_v2_after_reset</STRONG> (Thumb, 210 bytes, Stack size 120 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_after_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = JIG_TEST_display_v2_after_reset &rArr; JGI_TEST_display_UpdateScreen &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_get_scanBarcode_done
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_get_device_name
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_UpdateScreen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_configuration
</UL>

<P><STRONG><a name="[10a]"></a>JIG_TEST_display_v2_get_scanBarcode_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_get_scanBarcode_done))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
</UL>

<P><STRONG><a name="[110]"></a>JIG_TEST_display_v2_get_string_result</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_get_string_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JIG_TEST_display_v2_get_string_result
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_state_done
</UL>

<P><STRONG><a name="[112]"></a>JIG_TEST_display_v2_gimbal_name</STRONG> (Thumb, 62 bytes, Stack size 120 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_gimbal_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = JIG_TEST_display_v2_gimbal_name &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetCursor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[113]"></a>JIG_TEST_display_v2_gimbal_startup_calib_imu</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_gimbal_startup_calib_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = JIG_TEST_display_v2_gimbal_startup_calib_imu &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[114]"></a>JIG_TEST_display_v2_gimbal_startup_calib_motor</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_gimbal_startup_calib_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = JIG_TEST_display_v2_gimbal_startup_calib_motor &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[115]"></a>JIG_TEST_display_v2_main_control_process</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_main_control_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = JIG_TEST_display_v2_main_control_process &rArr; JIG_TEST_display_v2_state_done &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_waitting_scan_barCode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_waitting_for_login
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_time_test
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_state_done
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_setting_param_gimbal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_mode_test
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_startup_calib_motor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_startup_calib_imu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_name
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_get_device_name
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_gimbal_FSTD_v2_get_error_heartbeat_com2
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_process
</UL>

<P><STRONG><a name="[118]"></a>JIG_TEST_display_v2_mode_test</STRONG> (Thumb, 58 bytes, Stack size 120 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_mode_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = JIG_TEST_display_v2_mode_test &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[119]"></a>JIG_TEST_display_v2_setting_param_gimbal</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_setting_param_gimbal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = JIG_TEST_display_v2_setting_param_gimbal &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[11b]"></a>JIG_TEST_display_v2_state_done</STRONG> (Thumb, 418 bytes, Stack size 360 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_state_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = JIG_TEST_display_v2_state_done &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_get_string_result
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[11a]"></a>JIG_TEST_display_v2_time_test</STRONG> (Thumb, 42 bytes, Stack size 112 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_time_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = JIG_TEST_display_v2_time_test &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[116]"></a>JIG_TEST_display_v2_waitting_for_login</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_waitting_for_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = JIG_TEST_display_v2_waitting_for_login &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[117]"></a>JIG_TEST_display_v2_waitting_scan_barCode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, jig_test_display_v2.o(i.JIG_TEST_display_v2_waitting_scan_barCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = JIG_TEST_display_v2_waitting_scan_barCode &rArr; JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_writeData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JGI_TEST_display_v2_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_main_control_process
</UL>

<P><STRONG><a name="[10d]"></a>JIG_TEST_display_writeData</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, jig_test_display_v2.o(i.JIG_TEST_display_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = JIG_TEST_display_writeData &rArr; ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetCursor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_get_center_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_waitting_scan_barCode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_waitting_for_login
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_time_test
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_state_done
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_setting_param_gimbal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_mode_test
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_startup_calib_motor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_startup_calib_imu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_gimbal_name
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JIG_TEST_display_v2_after_reset
</UL>

<P><STRONG><a name="[64]"></a>can_dji_cmd_gimbal_rc</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, can_dji_gimbal.o(i.can_dji_cmd_gimbal_rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_dji_cmd_gimbal_rc &rArr; gs_can_crc8 &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc8
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_dji_gimbal.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>can_dji_cmd_remote_button</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, can_dji_remote.o(i.can_dji_cmd_remote_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_dji_cmd_remote_button &rArr; gs_can_crc8 &rArr; gs_can_crc_8_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_dji_remote.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>gs_can_crc_16_update</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, can_dji_protocol.o(i.gs_can_crc_16_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gs_can_crc_16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_msg_pack
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_parse
</UL>

<P><STRONG><a name="[1c4]"></a>gs_can_crc_8_update</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, can_dji_protocol.o(i.gs_can_crc_8_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gs_can_crc_8_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_msg_pack
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_crc8
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs_can_parse
</UL>

<P><STRONG><a name="[1b3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1b7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[63]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
